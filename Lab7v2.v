
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Lab7v2(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,
	
	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output reg	     [3:0]		VGA_B,
	output reg	     [3:0]		VGA_G,
	output reg	          		VGA_HS,
	output reg	     [3:0]		VGA_R,
	output reg	          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

   // Module clock frequency
   parameter SPI_CLK_FREQ  = 2_000_000;
   // Desired update interval
   parameter UPDATE_FREQ   = 50;
	
	// Signals for drawing to the display. 
	wire [3:0]     red, green, blue;
	wire [31:0]    row, col;

	// Timing signals
	wire           h_sync, v_sync;
	wire           disp_ena;
	
	// Signals from accelerometer module output
	wire [16:0]    data_x, data_y;
	wire 				data_update;
	
	// Signals for score keeping and display
	wire [3:0] score_low, score_mid, score_high;
	reg [7:0] HEX0_r, HEX1_r, HEX2_r;
	
//=======================================================
//  Parameter declarations
//=======================================================

   parameter ZERO	 	= 8'b11000000;		// parameters for HEX display
	parameter ONE 		= 8'b11111001;
   parameter TWO 		= 8'b10100100;
   parameter THREE 	= 8'b10110000;
   parameter FOUR 	= 8'b10011001;
   parameter FIVE 	= 8'b10010010;
   parameter SIX 		= 8'b10000010;
   parameter SEVEN 	= 8'b11111000;
   parameter EIGHT 	= 8'b10000000;
   parameter NINE 	= 8'b10011000;

//=======================================================
//  Module Instantiation
//=======================================================

	Lab7_comb Lab7_comb_inst (.clk(c3),
		.reset_n(KEY[0]),
		.start_key(KEY[1]),
		.SW(SW),
		.data_update(data_update),
		.data_x(data_x),
		.data_y(data_y),
		.row(row[8:0]),
		.col(col[9:0]),
		.red(red),
		.green(green),
		.blue(blue),
		.score_low(score_low),
		.score_mid(score_mid),
		.score_high(score_high)
	);
	
	
	// Instantiate pll
	pll pll_inst (
		.inclk0(MAX10_CLK1_50),	// 50 MHz system clock
		.c0(c0),						// 50 MHz
		.c1(c1),						// 2 MHz
		.c2(c2),						// 2 MHz w/ phase shift 270
		.c3(c3)						// 25 MHz
	);


	// Instantiate spi_control (Accelerometer module)
	spi_control #(
		.SPI_CLK_FREQ(SPI_CLK_FREQ),
		.UPDATE_FREQ(UPDATE_FREQ)
		)(
		.reset_n(KEY[0]),
		.clk(c0),
		.spi_clk(c1),
		.spi_clk_out(c2),
		.data_update(data_update),
		.data_x(data_x),
		.data_y(data_y),
		.SPI_SDI(GSENSOR_SDI),
		.SPI_SDO(GSENSOR_SDO),
		.SPI_CSN(GSENSOR_CS_N),
		.SPI_CLK(GSENSOR_SCLK),
		.interrupt(GSENSOR_INT)
	);
	
	
	// Instantiate VGA controller
	vga_controller control(
		.pixel_clk  (c3),
		.reset_n    (KEY[0]),
		.h_sync     (h_sync),
		.v_sync     (v_sync),
		.disp_ena   (disp_ena),
		.column     (col),
		.row        (row)
   );


	// Register VGA output signals for timing purposes
	always @(posedge c3) begin
		if (disp_ena == 1'b1) begin
			VGA_R <= red;
			VGA_B <= blue;
			VGA_G <= green;
		end else begin
			VGA_R <= 4'd0;
			VGA_B <= 4'd0;
			VGA_G <= 4'd0;
		end
		VGA_HS <= h_sync;
      VGA_VS <= v_sync;
	end




//=======================================================
//  Structural coding
//=======================================================

// Case statements take data from each score holding variable
// and display the appropriate digit on the HEX displays
	always @ (score_low or score_mid or score_high)
	begin
		case (score_low)
			4'b0000: HEX0_r = ZERO;
			4'b0001: HEX0_r = ONE;
			4'b0010: HEX0_r = TWO;
			4'b0011: HEX0_r = THREE;
			4'b0100: HEX0_r = FOUR;
			4'b0101: HEX0_r = FIVE;
			4'b0110: HEX0_r = SIX;
			4'b0111: HEX0_r = SEVEN;
			4'b1000: HEX0_r = EIGHT;
			4'b1001: HEX0_r = NINE;
		endcase
		case (score_mid)
			4'b0000: HEX1_r = ZERO;
			4'b0001: HEX1_r = ONE;
			4'b0010: HEX1_r = TWO;
			4'b0011: HEX1_r = THREE;
			4'b0100: HEX1_r = FOUR;
			4'b0101: HEX1_r = FIVE;
			4'b0110: HEX1_r = SIX;
			4'b0111: HEX1_r = SEVEN;
			4'b1000: HEX1_r = EIGHT;
			4'b1001: HEX1_r = NINE;
		endcase
		case (score_high)
			4'b0000: HEX2_r = ZERO;
			4'b0001: HEX2_r = ONE;
			4'b0010: HEX2_r = TWO;
			4'b0011: HEX2_r = THREE;
			4'b0100: HEX2_r = FOUR;
			4'b0101: HEX2_r = FIVE;
			4'b0110: HEX2_r = SIX;
			4'b0111: HEX2_r = SEVEN;
			4'b1000: HEX2_r = EIGHT;
			4'b1001: HEX2_r = NINE;
		endcase
	end
	assign LEDR = SW;
	assign HEX5 = 8'hff;
	assign HEX4 = 8'hff;
	assign HEX3 = 8'hff;
	assign HEX2 = HEX2_r;
	assign HEX1 = HEX1_r;
	assign HEX0 = HEX0_r;
	
endmodule
