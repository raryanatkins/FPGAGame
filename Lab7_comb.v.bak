module Lab7_comb (clk, reset_n, start_key, data_update, data_x, data_y, row, col, red, green, blue, SW);

	input 				clk;
	input 				reset_n;
	input 				start_key;
	input 				data_update;
	input  	  [15:0] data_x;
	input  	  [15:0] data_y;
	input  	  [8:0]	row;
	input  	  [9:0]	col;
	output 	  [3:0]	red;
	output 	  [3:0]	green;
	output 	  [3:0]	blue;
	input		  [9:0]  SW;
	
	reg [3:0] red, green, blue;
	
	reg [8:0] top_bound, bottom_bound;
	reg [9:0] left_bound, right_bound;
	
	wire [15:0] smoothing_filter_out_x;
	wire [15:0] smoothing_filter_out_y;
	wire [9:0] pixel_x_sat;
	wire [8:0] pixel_y_sat;
	
	reg alternate;
	reg enable;
	reg [31:0] count;
	reg [2:0] sec_counter;
	reg [71:0] row_bounds;		// Hold 8 different block heights
	
	wire [1:0] speed;
	wire key_press;
	
	reg [2:0] state;
	
	parameter IDLE 		= 3'b000;
	parameter COUNTDOWN  = 3'b001;
	parameter GO 			= 3'b010;
	parameter PAUSE 		= 3'b011;
	
	wire [8:0] size;
	
	wire [11:0] data_out;
	reg [7:0] addr;
	
	smoothing_filter smoothing_filter_inst (
		.SW(SW[1:0]),
		.data_update(data_update),
		.data_x(data_x),
		.data_y(data_y),
		.smoothing_filter_out_x(smoothing_filter_out_x),
		.smoothing_filter_out_y(smoothing_filter_out_y)
	);
	
	scale_and_saturate scale_and_saturate_inst (
		.clk(clk),
		.smoothing_filter_out_x(smoothing_filter_out_x),
		.smoothing_filter_out_y(smoothing_filter_out_y),
		.pixel_x_sat(pixel_x_sat),
		.pixel_y_sat(pixel_y_sat)
	);
	
	speed_select speed_select_inst (
		.SW(SW),
		.speed(speed)
	);
	
	block_size block_size_inst (
		.SW(SW),
		.size(size)
	);
	
	key_detector key_detector_inst (
		.clk(clk),
		.KEY(start_key),
		.key_press(key_press)
	);
	
	shape_rom shape_rom_inst (
		.clk(clk),
		.addr(addr),
		.data_out(data_out)
	);

	always @ (posedge clk)
	begin
		count = count + 32'h0000_0001;						// default inc count
		
		// If statements below give enable is true at various frequencies to change speed
		if (count >= 32'h017d_7840 && speed == 2'b00)	// 25 million
			enable = 1'b1;
		else if (count >= 32'h0131_2d00 && speed == 2'b01)	// 20 million
			enable = 1'b1;
		else if (count >= 32'h00e4_e1c0 && speed == 2'b10)	// 15 million
			enable = 1'b1;
		else if (count >= 32'h0098_9680 && speed == 2'b11)	// 10 million
			enable = 1'b1;
			
		if (enable == 1'b1)		// When enable is true, count is reset and alternate is flipped
		begin
			enable = 1'b0;
			count = 32'h0000_0000;
			if (state == GO)
			begin
				alternate = ~alternate;
				row_bounds = row_bounds << 4'b1001;		// Shift row_bounds left 9 (shift blocks down)
				case ({data_x[1:0], data_y[1:0]})		// Replace lower 9 bits with new "random" value
					4'b0000: row_bounds[8:0] = 9'd0;
					4'b0001: row_bounds[8:0] = 9'd30;
					4'b0010: row_bounds[8:0] = 9'd60;
					4'b0011: row_bounds[8:0] = 9'd90;
					4'b0100: row_bounds[8:0] = 9'd120;
					4'b0101: row_bounds[8:0] = 9'd150;
					4'b0110: row_bounds[8:0] = 9'd180;
					4'b0111: row_bounds[8:0] = 9'd210;
					4'b1000: row_bounds[8:0] = 9'd240;
					4'b1001: row_bounds[8:0] = 9'd270;
					4'b1010: row_bounds[8:0] = 9'd300;
					4'b1011: row_bounds[8:0] = 9'd330;
					4'b1100: row_bounds[8:0] = 9'd360;
					4'b1101: row_bounds[8:0] = 9'd390;
					4'b1110: row_bounds[8:0] = 9'd420;
					4'b1111: row_bounds[8:0] = 9'd450;
				endcase
			end
		end
		
		//state = state;			
		case (state)
			IDLE: 
			begin
				if (key_press == 1'b1)
				begin
					state = COUNTDOWN;
					sec_counter = 3'b100;
				end
			end
			COUNTDOWN:
			begin
				if (count == 32'h0000_0000)
					sec_counter = sec_counter - 3'b001;
				case(sec_counter)
					3'b011:				// Draws a 3 to the center of the screen
					begin
						if (col >= 10'd280 && col <= 10'd360 && row >= 9'd264 && row <= 9'd280)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd280 && col <= 10'd360 && row >= 9'd232 && row <= 9'd248)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd280 && col <= 10'd360 && row >= 9'd200 && row <= 9'd216)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd344 && col <= 10'd360 && row >= 9'd200 && row <= 9'd280)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else begin
							red = 4'b0000;
							green = 4'b0000;
							blue = 4'b0000;
						end
					end
					3'b010:			// Draws a 2
					begin
						if (col >= 10'd280 && col <= 10'd360 && row >= 9'd264 && row <= 9'd280)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd280 && col <= 10'd360 && row >= 9'd232 && row <= 9'd248)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd280 && col <= 10'd360 && row >= 9'd200 && row <= 9'd216)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd344 && col <= 10'd360 && row >= 9'd200 && row <= 9'd248)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else if (col >= 10'd280 && col <= 10'd296 && row >= 9'd248 && row <= 9'd280)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else begin
							red = 4'b0000;
							green = 4'b0000;
							blue = 4'b0000;
						end
					end
					3'b001:				// Draws a 1
					begin
						if (col >= 10'd312 && col <= 10'd328 && row >= 9'd200 && row <= 9'd280)
						begin
							red = 4'b1111;
							green = 4'b1111;
							blue = 4'b1111;
						end
						else
						begin
							red = 4'b0000;
							green = 4'b000;
							blue = 4'b0000;
						end
					end
					3'b000: 
					begin
						state = GO;
						// Set all blocks initially off the screen/invisible
						row_bounds[8:0]   = 9'd480;
						row_bounds[17:9]  = 9'd480;
						row_bounds[26:18] = 9'd480;
						row_bounds[35:27] = 9'd480;
						row_bounds[44:36] = 9'd480;
						row_bounds[53:45] = 9'd480;
						row_bounds[62:54] = 9'd480;
						row_bounds[71:63] = 9'd480;
					end
				endcase
			end			// COUNTDOWN state
			
			GO:			// Send blocks down the screen (left to right)
			begin
				if (alternate == 1'b0)
				begin
					if ((col > 10'd559 && col < 10'd639 && row >= row_bounds[8:0] && row <= row_bounds[8:0] + size) || (col > 10'd399 && col < 10'd479 && row >= row_bounds[26:18] && row <= row_bounds[26:18] + size) || (col > 10'd239 && col < 10'd319 && row >= row_bounds[44:36] && row <= row_bounds[44:36] + size) || (col > 10'd079 && col < 10'd159 && row >= row_bounds[62:54] && row <= row_bounds[62:54] + size))
					begin
						if (red & green & blue != 4'b0000)
							state = COUNTDOWN;
						red = 4'b1111;
						green = 4'b1111;
						blue = 4'b1111;
					end
					else begin
						red = 4'b0000;
						green = 4'b0000;
						blue = 4'b0000;
					end
				end
				else if (alternate == 1'b1)
				begin
					if ((col > 10'd479 && col < 10'd559 && row >= row_bounds[17:9] && row <= row_bounds[17:9] + size) || (col > 10'd319 && col < 10'd399 && row >= row_bounds[35:27] && row <= row_bounds[35:27] + size) || (col > 10'd159 && col < 10'd239 && row >= row_bounds[53:45] && row <= row_bounds[53:45] + size) || (col > 10'd000 && col < 10'd79 && row >= row_bounds[71:63] && row <= row_bounds[71:63] + size))
					begin
						if (red & green & blue != 4'b0000)
							state = COUNTDOWN;
						red = 4'b1111;
						green = 4'b1111;
						blue = 4'b1111;
					end
					else begin
						red = 4'b0000;
						green = 4'b0000;
						blue = 4'b0000;
					end
				end
				
				if (key_press == 1'b1)
					state = PAUSE;
			end		 // GO state
			
			PAUSE:
			begin
			// Same drawing logic as the GO state to leave blocks on the screen (no movement)
			// With added else if lines to draw a pause symbol on the top left
				if (alternate == 1'b0)
				begin
					if ((col > 10'd559 && col < 10'd639 && row >= row_bounds[8:0] && row <= row_bounds[8:0] + size) || (col > 10'd399 && col < 10'd479 && row >= row_bounds[26:18] && row <= row_bounds[26:18] + size) || (col > 10'd239 && col < 10'd319 && row >= row_bounds[44:36] && row <= row_bounds[44:36] + size) || (col > 10'd079 && col < 10'd159 && row >= row_bounds[62:54] && row <= row_bounds[62:54] + size))
					begin
						blue = 4'b1111;
					end
					else if (col >= 10'd50 && col <= 10'd60 && row >= 9'd20 && row <= 9'd60)
					begin
						red = 4'b1111;
						green = 4'b1111;
						blue = 4'b1111;
					end
					else if (col >= 10'd30 && col <= 10'd40 && row >= 9'd20 && row <= 9'd60)
					begin
						red = 4'b1111;
						green = 4'b1111;
						blue = 4'b1111;
					end
					else begin
						red = 4'b0000;
						green = 4'b0000;
						blue = 4'b0000;
					end
				end
				else if (alternate == 1'b1)
				begin
					if ((col > 10'd479 && col < 10'd559 && row >= row_bounds[17:9] && row <= row_bounds[17:9] + size) || (col > 10'd319 && col < 10'd399 && row >= row_bounds[35:27] && row <= row_bounds[35:27] + size) || (col > 10'd159 && col < 10'd239 && row >= row_bounds[53:45] && row <= row_bounds[53:45] + size) || (col > 10'd000 && col < 10'd79 && row >= row_bounds[71:63] && row <= row_bounds[71:63] + size))
					begin
						blue = 4'b1111;
					end
					else if (col >= 10'd50 && col <= 10'd60 && row >= 9'd20 && row <= 9'd60)
					begin
						red = 4'b1111;
						green = 4'b1111;
						blue = 4'b1111;
					end
					else if (col >= 10'd30 && col <= 10'd40 && row >= 9'd20 && row <= 9'd60)
					begin
						red = 4'b1111;
						green = 4'b1111;
						blue = 4'b1111;
					end
					else begin
						red = 4'b0000;
						green = 4'b0000;
						blue = 4'b0000;
					end
				end
				
				if (key_press == 1'b1)		// Unpause
					state = GO;
			end
			
			
		endcase
	

		left_bound = pixel_x_sat - 10'h008;
		right_bound = pixel_x_sat + 10'h008;
		top_bound = pixel_y_sat - 9'h008;
		bottom_bound = pixel_y_sat + 9'h008;
		

		if (col >= left_bound && col <= right_bound && row >= top_bound && row <= bottom_bound)
		begin
		
			addr = {top_bound[3:0], left_bound[3:0]};
			red = data_out[11:8];
			green = data_out[7:4];
			blue = data_out[3:0];
		
		end
		
		else begin
			red = 4'b0000;
			green = 4'b0000;
			blue = 4'b0000;
		end
		
	end
		

endmodule